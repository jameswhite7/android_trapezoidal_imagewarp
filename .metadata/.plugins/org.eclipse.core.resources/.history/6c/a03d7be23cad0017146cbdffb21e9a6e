package com.example.mybitmapmeshapp;

import com.example.mybitmapmeshapp.util.SystemUiHider;

/*import android.annotation.TargetApi;*/
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap; 
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
/*import android.os.Build;*/
import android.os.Bundle;
import android.os.Handler;
import android.view.MotionEvent;
import android.view.View;


public class MainActivity extends Activity {

    private static final boolean AUTO_HIDE = true;
    private static final int AUTO_HIDE_DELAY_MILLIS = 3000;
/*    private static final boolean TOGGLE_ON_CLICK = true;*/
/*    private static final int HIDER_FLAGS = SystemUiHider.FLAG_HIDE_NAVIGATION;*/
    private SystemUiHider mSystemUiHider;
    private Bitmap bitmap; 

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

/*        setContentView(R.layout.activity_main);*/
        
        
        class MyView extends View  
        {  
            //,,20  
            private final int WIDTH = 20;  
            private final int HEIGHT = 20;  
            //441  
            private final int COUNT = (WIDTH + 1) * (HEIGHT + 1);   
            //,Bitmap21*21  
            private final float[] verts = new float[COUNT * 2];  
            //,Bitmap21*21  
            //  
            private final float[] orig = new float[COUNT * 2];  
            public MyView(Context context, int drawableId) {  
                super(context);  
                setFocusable(true);  
                //  
                bitmap = BitmapFactory.decodeResource(getResources(), drawableId);  
                //  
                float bitmapWidth = bitmap.getWidth();  
                float bitmapHeight = bitmap.getHeight();  
                int index = 0;  
                for(int y = 0; y <= HEIGHT; y++)  
                {  
                    float fy = bitmapHeight * y / HEIGHT;  
                    for(int x = 0 ; x <= WIDTH; x++)  
                    {  
                        float fx = bitmapWidth * x / WIDTH;  
                        //orig,verts  
                        //,orig,verts21 * 21x,y?  
                        orig[index * 2 + 0] = verts[index * 2 + 0] = fx;  
                        orig[index * 2 + 1] = verts[index * 2 + 1] = fy;  
                        index += 1;  
                    }  
                }  
                //   
                setBackgroundColor(Color.WHITE);  
            }  
            protected void onDraw(Canvas canvas)  
            {  
                //bitmapverts  
                //(50)  
                canvas.drawBitmapMesh(bitmap, WIDTH, HEIGHT, verts, 0, null, 0, null);  
            }  
            //,verts  
            private void warp(float cx, float cy)  
            {  
                for(int i = 0; i < COUNT * 2; i += 2)  
                {  
                    float dx = cx - orig[i + 0];  
                    float dy = cy - orig[i + 1];  
                    float dd = dx * dx + dy * dy;  
                    //(cx,cy)  
                    float d = (float)Math.sqrt(dd);  
                    //?(cx,cy)?  
                    float pull = 80000 / ((float)(dd * d));  
                    //verts(bitmap?21 * 21)  
                    if(pull >= 1)  
                    {  
                        verts[i + 0] = cx;  
                        verts[i + 1] = cy;  
                    }  
                    else  
                    {  
                        //  
                        verts[i + 0] = orig[i + 0] + dx * pull;  
                        verts[i + 1] = orig[i + 1] + dx * pull;  
                    }  
                }  
                //View  
                invalidate();  
            }  
            public boolean onTouchEvent(MotionEvent event)  
            {  
                //warpverts  
                warp(event.getX() , event.getY());  
                return true;  
            }  
        }  

/*        final View controlsView = findViewById(R.id.fullscreen_content_controls);*/
/*        final View contentView = findViewById(R.id.fullscreen_content);*/

        // Set up an instance of SystemUiHider to control the system UI for
        // this activity.
/*        mSystemUiHider = SystemUiHider.getInstance(this, contentView, HIDER_FLAGS);*/
/*        mSystemUiHider.setup();
        mSystemUiHider
                .setOnVisibilityChangeListener(new SystemUiHider.OnVisibilityChangeListener() {
                    // Cached values.
                    int mControlsHeight;
                    int mShortAnimTime;

                    @Override
                    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
                    public void onVisibilityChange(boolean visible) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
                            // If the ViewPropertyAnimator API is available
                            // (Honeycomb MR2 and later), use it to animate the
                            // in-layout UI controls at the bottom of the
                            // screen.
                            if (mControlsHeight == 0) {
                                mControlsHeight = controlsView.getHeight();
                            }
                            if (mShortAnimTime == 0) {
                                mShortAnimTime = getResources().getInteger(
                                        android.R.integer.config_shortAnimTime);
                            }
                            controlsView.animate()
                                    .translationY(visible ? 0 : mControlsHeight)
                                    .setDuration(mShortAnimTime);
                        } else {
                            // If the ViewPropertyAnimator APIs aren't
                            // available, simply show or hide the in-layout UI
                            // controls.
                            controlsView.setVisibility(visible ? View.VISIBLE : View.GONE);
                        }

                        if (visible && AUTO_HIDE) {
                            // Schedule a hide().
                            delayedHide(AUTO_HIDE_DELAY_MILLIS);
                        }
                    }
                });*/

/*        // Set up the user interaction to manually show or hide the system UI.
        contentView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (TOGGLE_ON_CLICK) {
                    mSystemUiHider.toggle();
                } else {
                    mSystemUiHider.show();
                }
            }
        });*/

        // Upon interacting with UI controls, delay any scheduled hide()
        // operations to prevent the jarring behavior of controls going away
        // while interacting with the UI.
/*        findViewById(R.id.dummy_button).setOnTouchListener(mDelayHideTouchListener);*/
    }

    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);

        // Trigger the initial hide() shortly after the activity has been
        // created, to briefly hint to the user that UI controls
        // are available.
        delayedHide(100);
    }

/*    View.OnTouchListener mDelayHideTouchListener = new View.OnTouchListener() {
        @Override
        public boolean onTouch(View view, MotionEvent motionEvent) {
            if (AUTO_HIDE) {
                delayedHide(AUTO_HIDE_DELAY_MILLIS);
            }
            return false;
        }
    };*/

    Handler mHideHandler = new Handler();
    Runnable mHideRunnable = new Runnable() {
        @Override
        public void run() {
            mSystemUiHider.hide();
        }
    };

    /**
     * Schedules a call to hide() in [delay] milliseconds, canceling any
     * previously scheduled calls.
     */
    private void delayedHide(int delayMillis) {
        mHideHandler.removeCallbacks(mHideRunnable);
        mHideHandler.postDelayed(mHideRunnable, delayMillis);
    }
}
